{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## INTRODUCTION TO PYTHON"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Before Starting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python is a free source used widely for machine learning and statistics, it is know for being easy to learn and friendly environment, it has a wide variety of functions, commands, variables & functions that overcome other programming languages."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Print"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It prints a text in the screen, the text can be written by the user, and the print command can be formatted by various characters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "print(\"TEXT\") will print a text  \n",
    "print(\"TEXT\", VAR) will print a text followed up by a variable  \n",
    "print(f\"TEXT {VAR}\") will print a text followed up by the variable in braces, without relying on the commas  \n",
    "print(\"\"\"TEXT\"\"\") will print a text respecting the line jumps  \n",
    "print(\"\\n\") will jump on to the next line  \n",
    "print(\"\\\\\\\\\") will print a backslash(\\\\)  \n",
    "print(\"\\t*\") will print an asterisk(*)  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Comments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is text that will be ignored in the code, it is useful to give instructions to other coders of how your code works.  \n",
    "The comments are always written after a #"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Arithmetic Operations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are used to perform basic processes of the programs between numbers and variables  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\" + \" Will add a number to another  \n",
    "\" - \" Will substract the right number from the left one  \n",
    "\" * \" Will multiply a number by a number  \n",
    "\" / \" Will divide the right number from the left one  \n",
    "\" % \" Will obtain the remaining of the division of the right number by the left number  \n",
    "\" < \" Will print true if the left number is smaller than the right number, otherwise it will print false  \n",
    "\" > \" Will print true if the left number is bigger than the right number, otherwise it will print false  \n",
    "\" <= \" Will print true if the left number is smaller or equal than the right number, otherwise it will print false  \n",
    "\" >= \" Will print true if the left number is bigger or equal than the right number, otherwise it will print false  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Formatting a Text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "formatting = \"{} {} {}\"  \n",
    "print(formatting.format(\"TEXT\",\"TEXT\",\"TEXT\"))  \n",
    "\n",
    "Will print the text in the format given in the upward section, respecting the format given in all cases, useful for creating imaginary tables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Strings"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "print(\"TEXT1\" + \"TEXT2\") will print text1 right followed up by text2  \n",
    "print(\"TEXT\" * n) will print text by n times  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 1 - A Good First Program"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this exercise it will be learnt how to use the command \"PRINT\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Guten Tag!\n",
      "Hi World\n",
      "Hi Teacher\n",
      "Why are you reading this?\n",
      "Excellent Sir\n",
      "This is very easy\n"
     ]
    }
   ],
   "source": [
    "print(\"Guten Tag!\")\n",
    "print(\"Hi World\")\n",
    "print(\"Hi Teacher\")\n",
    "print(\"Why are you reading this?\")\n",
    "print(\"Excellent Sir\")\n",
    "print(\"This is very easy\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 2 - Comments & Pound Characters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this exercise it will be shown how to use the comments in-between the code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is not\n",
      "But this will run for sure\n"
     ]
    }
   ],
   "source": [
    "#This is a comment\n",
    "print(\"This is not\")#And this is ignored\n",
    "\n",
    "#If this is a comment then this shouldn't run\n",
    "#print(\"Hello!\")\n",
    "\n",
    "print(\"But this will run for sure\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 3 - Numbers & Math"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this exercise will be used the basic arithmetic operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50+10? 60\n",
      "65-20? 45\n",
      "80*12? 960\n",
      "70/8? 8.75\n",
      "60%7? 4\n",
      "10<70? True\n",
      "10>50? False\n",
      "32<=32? True\n",
      "50>=65? False\n"
     ]
    }
   ],
   "source": [
    "print(\"50+10?\", 50 + 10)\n",
    "print(\"65-20?\", 65 - 20)\n",
    "print(\"80*12?\", 80 * 12)\n",
    "print(\"70/8?\", 70 / 8)\n",
    "print(\"60%7?\", 60 % 7)\n",
    "print(\"10<70?\", 10 < 70)\n",
    "print(\"10>50?\", 10 > 50)\n",
    "print(\"32<=32?\", 32 <= 32)\n",
    "print(\"50>=65?\", 50 >= 65)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 4 - Variables and Names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this practice we'll learn to assign variables, being dependant or independant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mass of the Object 100 kg\n",
      "Acceleration of the object 3 m/s^2\n",
      "Force 300 N\n"
     ]
    }
   ],
   "source": [
    "mass = 100\n",
    "acceleration = 3\n",
    "force = mass * acceleration\n",
    "\n",
    "print(\"Mass of the Object\", mass, \"kg\")\n",
    "print(\"Acceleration of the object\", acceleration, \"m/s^2\")\n",
    "\n",
    "print(\"Force\", force, \"N\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 5 - More Variables & Printing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I'll talk about Alejandro Govea\n",
      "He's 19 years old\n",
      "He weights 70 kilograms\n",
      "He's 1.67 meters tall\n",
      "He's also known as Norian Loarii in many places\n",
      "His BMI is 25.099501595611173\n"
     ]
    }
   ],
   "source": [
    "name = \"Alejandro Govea\"\n",
    "age = 19\n",
    "height = 1.67 # In Meters\n",
    "weight = 70 # In Kilograms\n",
    "alias = \"Norian Loarii\"\n",
    "\n",
    "print(f\"I'll talk about {name}\")\n",
    "print(f\"He's {age} years old\")\n",
    "print(f\"He weights {weight} kilograms\")\n",
    "print(f\"He's {height} meters tall\")\n",
    "print(f\"He's also known as {alias} in many places\")\n",
    "\n",
    "bmi = weight/(height*height)\n",
    "\n",
    "print(f\"His BMI is {bmi}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 6 - Strings and Text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this exercise it will be shown some examples with strings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Love is like complex numbers\n",
      "I'm the real part and she's the imaginary part\n",
      "What the left string says is false... ... What the right string says is true\n"
     ]
    }
   ],
   "source": [
    "real = \"real\"\n",
    "imaginary = \"imaginary\"\n",
    "\n",
    "a = f\"Love is like complex numbers\"\n",
    "b = f\"I'm the {real} part and she's the {imaginary} part\"\n",
    "\n",
    "print(a)\n",
    "print(b)\n",
    "\n",
    "c = \"What the left string says is false... \"\n",
    "d = \"... What the right string says is true\"\n",
    "\n",
    "print(c + d)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7 - More Printing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Germany gives a lot of money to Greece\n",
      "--------------------\n",
      "GREECE PAY DEBT\n"
     ]
    }
   ],
   "source": [
    "print(\"Germany gives a lot of money to {}\".format(\"Greece\"))\n",
    "print(\"-\" * 20)\n",
    "\n",
    "e1=\"G\"\n",
    "e2=\"R\"\n",
    "e3=\"E\"\n",
    "e4=\"E\"\n",
    "e5=\"C\"\n",
    "e6=\"E\"\n",
    "e7=\"P\"\n",
    "e8=\"A\"\n",
    "e9=\"Y\"\n",
    "e10=\"D\"\n",
    "e11=\"E\"\n",
    "e12=\"B\"\n",
    "e13=\"T\"\n",
    "\n",
    "print(e1+e2+e3+e4+e5+e6+\" \"+e7+e8+e9+\" \"+e10+e11+e12+e13)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 8 - Printing, Printing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 0 1 0\n",
      "0 1 0 1\n",
      "1 0 1 0\n",
      "0 1 0 1\n",
      "{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}\n",
      "Hello Hällo Здороваться Bonjour\n"
     ]
    }
   ],
   "source": [
    "formatter = \"{} {} {} {}\"\n",
    "\n",
    "print(formatter.format(1,0,1,0))\n",
    "print(formatter.format(0,1,0,1))\n",
    "print(formatter.format(1,0,1,0))\n",
    "print(formatter.format(0,1,0,1))\n",
    "\n",
    "print(formatter.format(formatter,formatter,formatter,formatter))\n",
    "\n",
    "print(formatter.format(\n",
    "    \"Hello\",\n",
    "    \"Hällo\",\n",
    "    \"Здороваться\",\n",
    "    \"Bonjour\"\n",
    "))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 9 - Printing, Printing, Printing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First 10 letters: \n",
      "A\n",
      "B\n",
      "C\n",
      "D\n",
      "E\n",
      "F\n",
      "G\n",
      "H\n",
      "I\n",
      "J\n",
      "\n",
      "This is a text\n",
      "I'm out of creativity\n",
      "I don't know what to type\n",
      "\n"
     ]
    }
   ],
   "source": [
    "letters = \"\\nA\\nB\\nC\\nD\\nE\\nF\\nG\\nH\\nI\\nJ\"\n",
    "print(\"First 10 letters:\", letters)\n",
    "\n",
    "print(\"\"\"\n",
    "This is a text\n",
    "I'm out of creativity\n",
    "I don't know what to type\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 10 - What Was That?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please \\ give \\ me \\ an \\ AU \\ ?\n",
      "\n",
      "\t* Un\n",
      "\t* Deux\n",
      "\t* Trois\n",
      "\t* Quatre\n",
      "\t* Cinq\n",
      "\n"
     ]
    }
   ],
   "source": [
    "unsc = \"Please \\\\ give \\\\ me \\\\ an \\\\ AU \\\\ ?\"\n",
    "\n",
    "listr = \"\"\"\n",
    "\\t* Un\n",
    "\\t* Deux\n",
    "\\t* Trois\n",
    "\\t* Quatre\n",
    "\\t* Cinq\n",
    "\"\"\"\n",
    "\n",
    "print(unsc)\n",
    "print(listr)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
